import {
  _1
} from "./chunk-QSMOH2UM.js";
import {
  null_to_opt,
  some,
  valFromOption
} from "./chunk-333LTP4Q.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/bs-fetch/src/Fetch.res.mjs
function encodeRequestMethod(method_2) {
  if (typeof method_2 === "object") {
    return method_2._0;
  }
  switch (method_2) {
    case "Get":
      return "GET";
    case "Head":
      return "HEAD";
    case "Post":
      return "POST";
    case "Put":
      return "PUT";
    case "Delete":
      return "DELETE";
    case "Connect":
      return "CONNECT";
    case "Options":
      return "OPTIONS";
    case "Trace":
      return "TRACE";
    case "Patch":
      return "PATCH";
  }
}
function encodeReferrerPolicy(param) {
  switch (param) {
    case "None":
      return "";
    case "NoReferrer":
      return "no-referrer";
    case "NoReferrerWhenDowngrade":
      return "no-referrer-when-downgrade";
    case "SameOrigin":
      return "same-origin";
    case "Origin":
      return "origin";
    case "StrictOrigin":
      return "strict-origin";
    case "OriginWhenCrossOrigin":
      return "origin-when-cross-origin";
    case "StrictOriginWhenCrossOrigin":
      return "strict-origin-when-cross-origin";
    case "UnsafeUrl":
      return "unsafe-url";
  }
}
function encodeRequestMode(param) {
  switch (param) {
    case "Navigate":
      return "navigate";
    case "SameOrigin":
      return "same-origin";
    case "NoCORS":
      return "no-cors";
    case "CORS":
      return "cors";
  }
}
function encodeRequestCredentials(param) {
  switch (param) {
    case "Omit":
      return "omit";
    case "SameOrigin":
      return "same-origin";
    case "Include":
      return "include";
  }
}
function encodeRequestCache(param) {
  switch (param) {
    case "Default":
      return "default";
    case "NoStore":
      return "no-store";
    case "Reload":
      return "reload";
    case "NoCache":
      return "no-cache";
    case "ForceCache":
      return "force-cache";
    case "OnlyIfCached":
      return "only-if-cached";
  }
}
function encodeRequestRedirect(param) {
  switch (param) {
    case "Follow":
      return "follow";
    case "Error":
      return "error";
    case "Manual":
      return "manual";
  }
}
var HeadersInit = {};
function append(arg1, arg2, obj) {
  obj.append(arg1, arg2);
}
function $$delete(arg1, obj) {
  obj.delete(arg1);
}
function get(arg1, obj) {
  return null_to_opt(obj.get(arg1));
}
function has(arg1, obj) {
  return obj.has(arg1);
}
function set(arg1, arg2, obj) {
  obj.set(arg1, arg2);
}
var $$Headers = {
  append,
  $$delete,
  get,
  has,
  set
};
var BodyInit = {};
function map(f, v) {
  if (v !== void 0) {
    return some(_1(f, valFromOption(v)));
  }
}
function make(method_2, headers, body, referrer, referrerPolicyOpt, mode2, credentials2, cache2, redirect2, integrityOpt, keepalive, signal) {
  var referrerPolicy2 = referrerPolicyOpt !== void 0 ? referrerPolicyOpt : "None";
  var integrity = integrityOpt !== void 0 ? integrityOpt : "";
  var partial_arg = integrity;
  var partial_arg$1 = map(encodeRequestRedirect, redirect2);
  var partial_arg$2 = map(encodeRequestCache, cache2);
  var partial_arg$3 = map(encodeRequestCredentials, credentials2);
  var partial_arg$4 = map(encodeRequestMode, mode2);
  var partial_arg$5 = encodeReferrerPolicy(referrerPolicy2);
  var partial_arg$6 = map(encodeRequestMethod, method_2);
  return function(param) {
    var tmp = {};
    if (partial_arg$6 !== void 0) {
      tmp._method = partial_arg$6;
    }
    if (headers !== void 0) {
      tmp.headers = valFromOption(headers);
    }
    if (body !== void 0) {
      tmp.body = valFromOption(body);
    }
    if (referrer !== void 0) {
      tmp.referrer = referrer;
    }
    if (partial_arg$5 !== void 0) {
      tmp.referrerPolicy = partial_arg$5;
    }
    if (partial_arg$4 !== void 0) {
      tmp.mode = partial_arg$4;
    }
    if (partial_arg$3 !== void 0) {
      tmp.credentials = partial_arg$3;
    }
    if (partial_arg$2 !== void 0) {
      tmp.cache = partial_arg$2;
    }
    if (partial_arg$1 !== void 0) {
      tmp.redirect = partial_arg$1;
    }
    if (partial_arg !== void 0) {
      tmp.integrity = partial_arg;
    }
    if (keepalive !== void 0) {
      tmp.keepalive = keepalive;
    }
    if (signal !== void 0) {
      tmp.signal = valFromOption(signal);
    }
    return tmp;
  };
}
function method_(self) {
  var method_$1 = self.method;
  switch (method_$1) {
    case "CONNECT":
      return "Connect";
    case "DELETE":
      return "Delete";
    case "GET":
      return "Get";
    case "HEAD":
      return "Head";
    case "OPTIONS":
      return "Options";
    case "PATCH":
      return "Patch";
    case "POST":
      return "Post";
    case "PUT":
      return "Put";
    case "TRACE":
      return "Trace";
    default:
      return {
        TAG: "Other",
        _0: method_$1
      };
  }
}
function type_(self) {
  var e = self.type;
  switch (e) {
    case "":
      return "None";
    case "audio":
      return "Audio";
    case "font":
      return "Font";
    case "image":
      return "Image";
    case "script":
      return "Script";
    case "style":
      return "Style";
    case "track":
      return "Track";
    case "video":
      return "Video";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestType: " + e,
        Error: new Error()
      };
  }
}
function destination(self) {
  var e = self.destination;
  switch (e) {
    case "":
      return "None";
    case "document":
      return "Document";
    case "embed":
      return "Embed";
    case "font":
      return "Font";
    case "image":
      return "Image";
    case "manifest":
      return "Manifest";
    case "media":
      return "Media";
    case "object":
      return "Object";
    case "report":
      return "Report";
    case "script":
      return "Script";
    case "serviceworker":
      return "ServiceWorker";
    case "sharedworder":
      return "SharedWorker";
    case "style":
      return "Style";
    case "worker":
      return "Worker";
    case "xslt":
      return "Xslt";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestDestination: " + e,
        Error: new Error()
      };
  }
}
function referrerPolicy(self) {
  var e = self.referrerPolicy;
  switch (e) {
    case "":
      return "None";
    case "no-referrer":
      return "NoReferrer";
    case "no-referrer-when-downgrade":
      return "NoReferrerWhenDowngrade";
    case "origin":
      return "Origin";
    case "origin-when-cross-origin":
      return "OriginWhenCrossOrigin";
    case "same-origin":
      return "SameOrigin";
    case "strict-origin":
      return "StrictOrigin";
    case "strict-origin-when-cross-origin":
      return "StrictOriginWhenCrossOrigin";
    case "unsafe-url":
      return "UnsafeUrl";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown referrerPolicy: " + e,
        Error: new Error()
      };
  }
}
function mode(self) {
  var e = self.mode;
  switch (e) {
    case "cors":
      return "CORS";
    case "navigate":
      return "Navigate";
    case "no-cors":
      return "NoCORS";
    case "same-origin":
      return "SameOrigin";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestMode: " + e,
        Error: new Error()
      };
  }
}
function credentials(self) {
  var e = self.credentials;
  switch (e) {
    case "include":
      return "Include";
    case "omit":
      return "Omit";
    case "same-origin":
      return "SameOrigin";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestCredentials: " + e,
        Error: new Error()
      };
  }
}
function cache(self) {
  var e = self.cache;
  switch (e) {
    case "default":
      return "Default";
    case "force-cache":
      return "ForceCache";
    case "no-cache":
      return "NoCache";
    case "no-store":
      return "NoStore";
    case "only-if-cached":
      return "OnlyIfCached";
    case "reload":
      return "Reload";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestCache: " + e,
        Error: new Error()
      };
  }
}
function redirect(self) {
  var e = self.redirect;
  switch (e) {
    case "error":
      return "Error";
    case "follow":
      return "Follow";
    case "manual":
      return "Manual";
    default:
      throw {
        RE_EXN_ID: "Failure",
        _1: "Unknown requestRedirect: " + e,
        Error: new Error()
      };
  }
}
function classify(t) {
  if (typeof t === "string") {
    return {
      NAME: "String",
      VAL: t
    };
  } else {
    return {
      NAME: "File",
      VAL: t
    };
  }
}
var EntryValue = {
  classify
};
function append$1(arg1, arg2, obj) {
  obj.append(arg1, arg2);
}
function $$delete$1(arg1, obj) {
  obj.delete(arg1);
}
function get$1(arg1, obj) {
  return obj.get(arg1);
}
function getAll(arg1, obj) {
  return obj.getAll(arg1);
}
function set$1(arg1, arg2, obj) {
  obj.set(arg1, arg2);
}
function has$1(arg1, obj) {
  return obj.has(arg1);
}
function appendObject(arg1, arg2, filename, obj) {
  obj.append(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
function appendBlob(arg1, arg2, filename, obj) {
  obj.append(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
function appendFile(arg1, arg2, filename, obj) {
  obj.append(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
function setObject(arg1, arg2, filename, obj) {
  obj.set(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
function setBlob(arg1, arg2, filename, obj) {
  obj.set(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
function setFile(arg1, arg2, filename, obj) {
  obj.set(arg1, arg2, filename !== void 0 ? valFromOption(filename) : void 0);
}
var $$FormData = {
  EntryValue,
  Iterator: void 0,
  append: append$1,
  $$delete: $$delete$1,
  get: get$1,
  getAll,
  set: set$1,
  has: has$1,
  appendObject,
  appendBlob,
  appendFile,
  setObject,
  setBlob,
  setFile
};
var $$AbortController = {
  abort: function(prim) {
    prim.abort();
  }
};
function Body_arrayBuffer(prim) {
  return prim.arrayBuffer();
}
function Body_blob(prim) {
  return prim.blob();
}
function Body_formData(prim) {
  return prim.formData();
}
function Body_json(prim) {
  return prim.json();
}
function Body_text(prim) {
  return prim.text();
}
var Body = {
  arrayBuffer: Body_arrayBuffer,
  blob: Body_blob,
  formData: Body_formData,
  json: Body_json,
  text: Body_text
};
var RequestInit = {
  make
};
function Request_arrayBuffer(prim) {
  return prim.arrayBuffer();
}
function Request_blob(prim) {
  return prim.blob();
}
function Request_formData(prim) {
  return prim.formData();
}
function Request_json(prim) {
  return prim.json();
}
function Request_text(prim) {
  return prim.text();
}
var $$Request = {
  method_,
  type_,
  destination,
  referrerPolicy,
  mode,
  credentials,
  cache,
  redirect,
  arrayBuffer: Request_arrayBuffer,
  blob: Request_blob,
  formData: Request_formData,
  json: Request_json,
  text: Request_text
};
function Response_clone(prim) {
  return prim.clone();
}
function Response_arrayBuffer(prim) {
  return prim.arrayBuffer();
}
function Response_blob(prim) {
  return prim.blob();
}
function Response_formData(prim) {
  return prim.formData();
}
function Response_json(prim) {
  return prim.json();
}
function Response_text(prim) {
  return prim.text();
}
var $$Response = {
  clone: Response_clone,
  arrayBuffer: Response_arrayBuffer,
  blob: Response_blob,
  formData: Response_formData,
  json: Response_json,
  text: Response_text
};
export {
  $$AbortController,
  $$FormData,
  $$Headers,
  $$Request,
  $$Response,
  Body,
  BodyInit,
  HeadersInit,
  RequestInit
};
//# sourceMappingURL=bs-fetch_src_Fetch__res__mjs.js.map
