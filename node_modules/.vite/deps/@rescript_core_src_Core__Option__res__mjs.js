import {
  some,
  valFromOption
} from "./chunk-333LTP4Q.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/@rescript/core/src/Core__Error.res.mjs
function panic(msg) {
  throw new Error("Panic! " + msg);
}

// node_modules/@rescript/core/src/Core__Option.res.mjs
function filter(opt, p) {
  if (opt !== void 0 && p(valFromOption(opt))) {
    return opt;
  }
}
function forEach(opt, f) {
  if (opt !== void 0) {
    return f(valFromOption(opt));
  }
}
function getExn(x, message) {
  if (x !== void 0) {
    return valFromOption(x);
  } else {
    return panic(message !== void 0 ? message : "Option.getExn called for None value");
  }
}
function mapOr(opt, $$default, f) {
  if (opt !== void 0) {
    return f(valFromOption(opt));
  } else {
    return $$default;
  }
}
function map(opt, f) {
  if (opt !== void 0) {
    return some(f(valFromOption(opt)));
  }
}
function flatMap(opt, f) {
  if (opt !== void 0) {
    return f(valFromOption(opt));
  }
}
function getOr(opt, $$default) {
  if (opt !== void 0) {
    return valFromOption(opt);
  } else {
    return $$default;
  }
}
function orElse(opt, other) {
  if (opt !== void 0) {
    return opt;
  } else {
    return other;
  }
}
function isSome(x) {
  return x !== void 0;
}
function isNone(x) {
  return x === void 0;
}
function equal(a, b, eq) {
  if (a !== void 0) {
    if (b !== void 0) {
      return eq(valFromOption(a), valFromOption(b));
    } else {
      return false;
    }
  } else {
    return b === void 0;
  }
}
function compare(a, b, cmp) {
  if (a !== void 0) {
    if (b !== void 0) {
      return cmp(valFromOption(a), valFromOption(b));
    } else {
      return 1;
    }
  } else if (b !== void 0) {
    return -1;
  } else {
    return 0;
  }
}
var mapWithDefault = mapOr;
var getWithDefault = getOr;
export {
  compare,
  equal,
  filter,
  flatMap,
  forEach,
  getExn,
  getOr,
  getWithDefault,
  isNone,
  isSome,
  map,
  mapOr,
  mapWithDefault,
  orElse
};
//# sourceMappingURL=@rescript_core_src_Core__Option__res__mjs.js.map
